% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/combine_indices.R
\name{combine_indices}
\alias{combine_indices}
\title{Combine Binomial and Positive Catch Indices}
\usage{
combine_indices(
  binomial_gi,
  positive_gi,
  method = c("multiplicative", "arithmetic", "geometric"),
  rescale_combined = TRUE,
  confidence_method = c("delta", "bootstrap", "independent"),
  bootstrap_n = 1000,
  validate_data = TRUE,
  ...
)
}
\arguments{
\item{binomial_gi}{A `gam_influence` object from a binomial model (presence/absence or catch probability).
This model should predict the probability of a positive catch.}

\item{positive_gi}{A `gam_influence` object from a positive catch model (e.g., Gamma or Gaussian).
This model should predict catch rates conditional on positive catches.}

\item{method}{Character. Method for combining indices:
- `"multiplicative"`: Combined index = P(positive) * E(catch | positive) (default)
- `"arithmetic"`: Combined index = P(positive) + E(catch | positive) - baseline
- `"geometric"`: Combined index = sqrt(P(positive) * E(catch | positive))}

\item{rescale_combined}{Logical. Should the combined index be rescaled to have geometric mean = 1? Default TRUE.}

\item{confidence_method}{Character. Method for calculating combined confidence intervals:
- `"delta"`: Delta method using first-order Taylor approximation (default)
- `"bootstrap"`: Bootstrap confidence intervals (more accurate but slower)
- `"independent"`: Treat components as independent (conservative)}

\item{bootstrap_n}{Integer. Number of bootstrap samples if confidence_method = "bootstrap" (default 1000).}

\item{validate_data}{Logical. Should data compatibility be validated? Default TRUE.}

\item{...}{Additional arguments (currently unused).}
}
\value{
An object of class `gam_influence_combined` containing:
\describe{
  \item{binomial_gi}{The original binomial gam_influence object}
  \item{positive_gi}{The original positive catch gam_influence object}
  \item{combined_indices}{Data frame with combined indices, confidence intervals, and diagnostics}
  \item{method}{The combination method used}
  \item{diagnostics}{Diagnostic information about the combination process}
}
}
\description{
Combines indices from a binomial GAM (probability of positive catch) and a
positive catch GAM to create an overall CPUE index using the delta-GLM approach. This method
is commonly used in fisheries analysis where catches contain many zeros.
}
\details{
**Delta-GLM Approach:**
The delta-GLM method is a two-step process commonly used in fisheries for zero-inflated data:
1. **Binomial component**: Models the probability of a positive catch
2. **Positive component**: Models the catch rate given a positive catch occurred
3. **Combined index**: Multiplies these components to get overall expected catch rate

**Mathematical Framework:**
For the multiplicative method (most common):
Combined Index = P(catch > 0) * E(catch | catch > 0)

Where:
- P(catch > 0) comes from the binomial model
- E(catch | catch > 0) comes from the positive catch model

**Confidence Intervals:**
- **Delta method**: Uses first-order Taylor approximation for uncertainty propagation
- **Bootstrap**: Resamples to empirically estimate confidence intervals
- **Independent**: Assumes independence between components (often conservative)

**Data Requirements:**
- Both models must use the same focus term (e.g., "year")
- Focus levels should be identical or compatible
- Data should represent the same population/fishery

**Validation Checks:**
- Ensures both objects have been processed by `calculate_influence()`
- Validates focus term compatibility
- Checks for reasonable probability ranges (0-1 for binomial component)
- Warns about potential issues (e.g., very low catch probabilities)
}
\examples{
\dontrun{
# Example fisheries CPUE analysis with zero-inflated data
library(mgcv)

# Prepare data - separate zero and positive catches
data$presence <- as.numeric(data$cpue > 0)
data$positive_cpue <- ifelse(data$cpue > 0, data$cpue, NA)

# Fit binomial model for catch probability
mod_binom <- gam(presence ~ year + s(depth) + s(temperature),
  family = binomial(), data = data
)
gi_binom <- gam_influence(mod_binom, focus = "year")
gi_binom <- calculate_influence(gi_binom)

# Fit positive catch model (Gamma for positive continuous data)
mod_pos <- gam(positive_cpue ~ year + s(depth) + s(temperature),
  family = Gamma(link = "log"),
  data = data[data$cpue > 0, ]
)
gi_pos <- gam_influence(mod_pos, focus = "year")
gi_pos <- calculate_influence(gi_pos)

# Combine indices using delta-GLM approach
combined_gi <- combine_indices(gi_binom, gi_pos)

# Alternative combination methods
combined_geo <- combine_indices(gi_binom, gi_pos, method = "geometric")
combined_boot <- combine_indices(gi_binom, gi_pos, confidence_method = "bootstrap")

# View results
print(combined_gi)
plot(combined_gi)
summary(combined_gi)
}
}
